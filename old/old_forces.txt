function [FI_x, FI_y] = interfacial_force(n, x_p, y_p, wI, RI)
    FI_x=zeros(n,1);
    FI_y=zeros(n,1);
    for i=1:n
        [d,dx,dy] = distances(x_p, x_p(i), y_p, y_p(i));

        % Note, I played around with this function quite a bit
        % F=(2*wI).*(100e-9./d.^3).*((100e-9./d)-1);
        % F=-(2*wI).*exp(-(d.^2)/RI^2);%exp(-(d-100e-9).^2/RI^2));

        % Use lennard-jones potential
        d = max(d, 0.5e-6);
        cutoff = 30e-6;

        % Only calculate forces within the cutoff distance
        mask = d < cutoff;
        inv_2 = zeros(size(d));

        inv_2(mask) = (RI ./ d(mask)).^3;
        inv_6 = inv_2.^1;
        inv_12 = inv_6.^2;
        % inv_2 = (RI ./ d).^2;
        % inv_6 = inv_2.^3;
        % inv_12 = inv_6.^2;
        F = 4*wI .* (inv_12 - inv_6);
        
        % Sum all the forces
        FI_x = FI_x + (F.*dx);
        FI_y = FI_y + (F.*dy);
    end
end

function [Fp_x, Fp_y] = pinning_force(n, x_p, y_p, w_pin, x_pin, y_pin, R_pin)

    assert(isvector(x_p) && isvector(y_p), 'x_p and y_p must be vectors');
    assert(length(x_p) == length(y_p), 'x_p and y_p must be the same length');
    assert(length(x_p) == n, 'x_p must have length n');

    Fp_x=zeros(n,1);
    Fp_y=zeros(n,1);
    for i=1:length(w_pin)

        assert(isscalar(x_pin(i)) && isscalar(y_pin(i)), 'xp and yp must be scalars for each pinning site');
        [d,dx,dy] = distances(x_p, x_pin(i), y_p, y_pin(i));

        % assert(all(d < 200e-6), 'Distance d must be less than 200e-6 for pinning force calculation');
        
        % Note, I played around with this function quite a bit
        % F=2*10*wp(i).*((d.^2/Rp^2).^9).*exp(-((d.^2/Rp^2).^10));
        F=-(2*w_pin(i)).*exp(-(d.^2/R_pin^2));
        % F = wp(i) .* exp(- (d / Rp).^2);
        % cutoff = 5e-6;

        % % Smooth cutoff mask: 1 where d < cutoff, 0 elsewhere
        % mask = d < cutoff;

        % % Simple Gaussian-like force profile inside cutoff
        % F = zeros(n,1);
        % F(mask) = w_pin(i) * exp(- (d(mask) / R_pin).^2);

        % assert(all(size(dx) == size(F)), 'dx and F must be the same size');
        % assert(all(~isnan(F)), 'Pinning force contains NaNs');
        % assert(all(~isinf(F)), 'Pinning force contains Infs');

        % Sum all the forces
        Fp_x = Fp_x + (F.*dx);
        Fp_y = Fp_y + (F.*dy);
        % Fp_x(mask) = Fp_x(mask) + F(mask) .* dx(mask);
        % Fp_y(mask) = Fp_y(mask) + F(mask) .* dy(mask);
    end
end